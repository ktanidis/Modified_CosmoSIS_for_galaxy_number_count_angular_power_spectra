[runtime]
; Switch the sampler to polychord, a sophisticated 
; nested sampler (and alternative to MultiNest) which 
; computes the Bayesian evidence for a model.  As a 
; by-product you can generate posterior samples.
sampler = polychord

[polychord]
live_points=10
; PolyChord can produce a large amount of additional
; output.  If you're an expert you can set a base
; file root to use for all those files here
polychord_outfile_root=

; If you have the fast/slow splitting mode switched on (irrelevant for this likelihood)
; then you can set the amount of time spent in each subspace with this:
; fast_fraction = 0.5

[output]
filename = demo24.txt
format = text
verbosity= debug

[pipeline]
; We use two likelihoods, the JLA (for high redshift) and
; Riess 2011 to anchor H0, which is otherwise degenerate
; with the nuisance parameter M
modules = consistency camb jla riess11
values = demos/values24.ini
extra_output =
likelihoods = jla riess
quiet=T
debug=F
timing=F



[camb]
; For background-only data we do not need a full
; Boltzmann evaluation, just D(z), etc.
; Setting mode=background means we get this.
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=background
feedback=0

[jla]
; JLA needs quite a lot of parameters telling it where
; data files are ...
file = cosmosis-standard-library/supernovae/jla_v3/jla.so
data_dir = cosmosis-standard-library/supernovae/jla_v3/data
data_file = jla_lcparams.txt
scriptmcut = 10.0
mag_covmat_file = jla_v0_covmatrix.dat
stretch_covmat_file = jla_va_covmatrix.dat
colour_covmat_file = jla_vb_covmatrix.dat
mag_stretch_covmat_file = jla_v0a_covmatrix.dat
mag_colour_covmat_file = jla_v0b_covmatrix.dat
stretch_colour_covmat_file = jla_vab_covmatrix.dat

[riess11]
file = cosmosis-standard-library/likelihood/riess11/riess11.py

; The consistency module translates between our chosen parameterization
; and any other that modules in the pipeline may want (e.g. camb)
[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py
