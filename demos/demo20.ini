;  demo20: Importance sampler showing Planck likelihood combined with
;  supernovae.


[runtime]
sampler = importance

;  Importance sampling is a general method for estimating quantities from
;    one distribution, P', when what you have is samples from another,
;    similar distribution, P. In IS a weight is calculated for each sample
;    that depends on the difference between the likelihoods under the two
;    distributions.
;
;    IS works better the more similar the two distributions are, but can
;    also be useful for adding additional constraints to an existing data
;    set.
;
;    There's a nice introduction to the general idea in Mackay ch. 29:
;    http://www.inference.phy.cam.ac.uk/itila/book.html
[importance]
; Chain of input samples (Planck likelihoods in this case).
input = demos/samples20.txt
; Number of samples to do between saving output.
nstep = 128
; Include the old likelihood in the old likelihood; i.e. P'=P*P_new.
add_to_likelihood = T

[output]
filename = demo20.txt
format = text
verbosity= debug

[pipeline]
; We use two likelihoods, the JLA (for high redshift) and
; Riess 2011 to anchor H0, which is otherwise degenerate
; with the nuisance parameter M
modules = consistency camb jla
values = demos/values20.ini
extra_output =
likelihoods = jla
quiet=T
debug=F
timing=F

[camb]
; For background-only data we do not need a full
; Boltzmann evaluation, just D(z), etc.
; Setting mode=background means we get this.
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=background
feedback=0

[jla]
; JLA needs quite a lot of parameters telling it where
; data files are ...
file = cosmosis-standard-library/supernovae/jla_v3/jla.so
data_dir = cosmosis-standard-library/supernovae/jla_v3/data
data_file = jla_lcparams.txt
scriptmcut = 10.0
mag_covmat_file = jla_v0_covmatrix.dat
stretch_covmat_file = jla_va_covmatrix.dat
colour_covmat_file = jla_vb_covmatrix.dat
mag_stretch_covmat_file = jla_v0a_covmatrix.dat
mag_colour_covmat_file = jla_v0b_covmatrix.dat
stretch_colour_covmat_file = jla_vab_covmatrix.dat

; The consistency module translates between our chosen parameterization
; and any other that modules in the pipeline may want (e.g. camb)
[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py
