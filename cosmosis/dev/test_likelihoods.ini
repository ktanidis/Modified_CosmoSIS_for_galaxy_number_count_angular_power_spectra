[runtime]
; The test sampler just runs a single parameter set
sampler = maxlike
;========================================================
[test]
; These are the parameters for this sampler.
; In this case there is just one parameter
save_dir=dev_demo


[maxlike]
; The values file we use in this example was
; created just like the one we made in demo4,
; by setting sampler = maxlike above, so that
; these settings were used:
output_ini = cosmosis/dev/rosenbrock.ini
tolerance = 1e-8


;========================================================
[emcee]
; The emcee sampler uses the concept of walkers, a collection
; of live points.  Sampling is done along lines that connect
; pairs of walkers.  The number of walkers must be at least
; 2*nparam + 1, but in general more than that usually works
; better.

walkers = 64

; This many samples is overkill, just to make the plots
; look a lot nicer

samples = 1000
; This is the interval at which convergence diagnostics
; are performed

nsteps = 100



; This section describes what pipeline overall pipeline is to be run.
[pipeline]
;
; The root directory of the des-pipe installation.
; module paths are described relative to this path
;
; The list of modules to run in this analysis.
; Some modules like camb_cmb calculates theory predictions.
; Others like hst and wmap compare these predictions to data and calculate
; a likelihood.
; Every module listed here needs to be a section name from later in the file.

modules = multigaussian
;
; These are the likelihoods that are extracted, summed, and passed to
; the samplers.  Likelihood modules named above should save their results
; with these names.

likelihoods = multigaussian

; The file named here should contain the list of parameters
; to be sampled over (or left fixed).  See values.ini for an example.

values = cosmosis/dev/multigaussian_values.ini

; Whether to suppress output, e.g. when running long chains
quiet = yes


[pymc]
; These are the options for the pymc sampler.
; If you use a different sampler they will be ignored.

; The name of the output file.
name = pymc_10Dgauss_100000mpi_3chains.txt

; The input covariance matrix.
; The ordering of this file should be the same as
; the ordering of the values file.

covmat = cosmosis/dev/eggbox_covmat.txt

; The number of samples to generate
samples = 100000
;20000




;Adaptive MCMC
;No run time Gelman-Rubin convergence checking is done for this option

adaptive_mcmc = yes

;If set to yes  R statistic will be computed
;every nsteps and chains will stop either
;when R < Rcrit or samples number of steps taken

gelman_rubin = yes

;the Gelman-Rubin statistic
Rcrit = 1.3

; fraction of samples to burn at the start
burn = 0.2

;check for convergence very nsteps after burn
nsteps = 100


; If set to "yes", fit a Gaussian
; approximation to the likelihood, finding the
; best-fit and approximate error bars.
; The samples are then drawn (very, very fast)
normal_approximation = no

; Use an older output format, with each parameter
; in a different file.  Not recommended
old_output = no

;========================================================
[output]
filename = eggbox.txt
format = text
verbosity= debug
;========================================================

[multigaussian]
; as usual set where to find the module interface
file=cosmosis-standard-library/likelihood/test_likelihoods/multiGaussian_likelihood.py
means_filename=cosmosis/dev/means10D.out
cov_filename=cosmosis/dev/covariance10D.out
function = execute

;========================================================
[rosenbrock]
file = cosmosis-standard-library/likelihood/test_likelihoods/rosenbrock_likelihood.py
function = execute
;========================================================
[eggbox]
file = cosmosis-standard-library/likelihood/test_likelihoods/eggbox_likelihood.py
function = execute
;========================================================