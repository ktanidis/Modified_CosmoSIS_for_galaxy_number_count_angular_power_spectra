[runtime]
; The test sampler just runs a single parameter set
sampler = grid

[maxlike]
maxiter = 1000
tolerance = 0.001
output_ini = mgcamb_output.ini


[emcee]
walkers = 32
samples = 400
nsteps = 1



[grid]
;save=mgcamb_results
nsample_dimension=10

[output]
filename=mgcamb.txt
format=text

[test]
; These are the parameters for this sampler.
; In this case there is just one parameter
save_dir=mgcamb_results

; If something goes wrong this will aid diagnosis
fatal_errors=T

; The pipeline section contains information
; that describes the sequence of calculations
; to be done and what we want out at the end
[pipeline]
; The list of modules to be run, in this order.
; The modules named here must appear as sections below
modules = consistency mgcamb sigma8_rescale halofit load_nz shear_shear_mg 2pt cfhtlens planck riess11
; The file to get cosmological and nuisance parameters
; from.
values = cosmosis/dev/mgcamb_values.ini
; Not used here, becuase we are not sampling
likelihoods = cfhtlens planck riess
extra_output = 
quiet=F
debug=T
timing=F

; The consistency module translates between our chosen parameterization
; and any other that modules in the pipeline may want (e.g. camb)
[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py

[mgcamb]
file = cosmosis-standard-library/boltzmann/mgcamb/camb.so
mode=all
lmax=2500
feedback=2
mg_model=3



; Halofit non-linear power
[halofit]
file = cosmosis-standard-library/boltzmann/halofit/halofit_module.so

; This is an example of a very simple module - it simple loads in 
; a file once at the start when setting up and supplies fixed data
; when executed.
[load_nz]
file = cosmosis-standard-library/number_density/load_nz/load_nz.py
filepath = cosmosis-standard-library/likelihood/cfhtlens/combined_nz.txt

; This module uses the Limber approximation to compute shear-shear C_ell
; given the shear kernel (which is derived from the number density and 
; from geometry)
[shear_shear_mg]
file = cosmosis-standard-library/shear/spectra-ppf/interface.so
ell_min = 20.0
ell_max = 10000.0
n_ell = 150
intrinsic_alignments=F

; This module converts shear spectra from c_ell to xi(theta).
; It is slow and can be a little dodgy at small theta, so if you have a better
; version it would be great if you be happy to add it (or have us add it) to cosmosis
[2pt]
file = cosmosis-standard-library/shear/cl_to_xi/cl_to_xi_interface.py
theta_min = 1.0
theta_max = 50.0
n_theta = 50


; The CFHTLens likelihood
[cfhtlens]
file = cosmosis-standard-library/likelihood/cfhtlens/cfhtlens_interface.py


[planck]
file = cosmosis-standard-library/likelihood/planck/planck_interface.so
t_high_file = ${PLANCK_DATA_DIR}/CAMspec_v6.2TN_2013_02_26_dist.clik


; The Riess 11 likelihood anchors H0 for us
[riess11]
file = cosmosis-standard-library/likelihood/riess11/riess11.py


[sigma8_rescale]
file = cosmosis-standard-library/utility/sample_sigma8/sigma8_rescale.py

