;***********************************
;multinest is the default sampler
;***********************************
[runtime]
sampler = fisher
root = ${COSMOSIS_SRC_DIR}

[nsample_dimension] = 10

[star]
nsample_dimension=5
[grid]
nsample_dimension=20

[fisher]
step_size = 0.02

[output]
filename=lsst_forecast.txt
format=text

[pipeline]
quiet=F
timing=F
debug=T
modules = consistency camb halofit extrapolate load_nz photoz_bias unbiased_galaxies nonlinear_linear_alignment  pk_to_cl bias add_intrinsic 2pt_like 
values = examples/lsst_forecast/lsst_values.ini
likelihoods = lsst

[2pt_like]
file = cosmosis-standard-library/likelihood/2pt/2pt_like.py
data_file=lsst_simulation.fits
covmat_name=COVMAT
like_name=lsst
data_sets=shear_cl  galaxy_cl galaxy_shear_cl
; You can also add these data sets, but without a flexible enough model for bias they
; give phenomenally powerful and sadly unrealistic constraints:
; galaxy_cl galaxy_shear_cl

[load_nz]
file = cosmosis-standard-library/number_density/load_nz_fits/load_nz_fits.py
nz_file = lsst_simulation.fits
data_sets=source
prefix_section=T
prefix_extension=F

[photoz_bias]
file = cosmosis-standard-library/number_density/photoz_bias/photoz_bias.py
mode = additive
sample = nz_source
bias_section = photoz_errors


[unbiased_galaxies]
file = cosmosis-standard-library/bias/no_bias/no_bias.py


#The remainder of the pipeline is identical to the one used in the lsst_simulate.ini
#file adjacent to this one.
#We could put this text in a file lsst_common.ini and use the command:
#%include lsst_common.ini but I didn't want to people.

[nonlinear_linear_alignment]
file = cosmosis-standard-library/intrinsic_alignments/la_model/linear_alignments_interface.py
method = bk_corrected
do_galaxy_intrinsic = T

[add_intrinsic]
file=cosmosis-standard-library/shear/add_intrinsic/add_intrinsic.py
shear-shear=T
position-shear=T


[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py

[camb]
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=all
lmax=2500
feedback=0

[extrapolate]
file = cosmosis-standard-library/boltzmann/extrapolate/extrapolate_power.py 
kmax = 500.

[sigma8_rescale]
file = cosmosis-standard-library/utility/sample_sigma8/sigma8_rescale.py

[halofit]
file = cosmosis-standard-library/boltzmann/halofit_takahashi/halofit_interface.so

[bias]
file = cosmosis-standard-library/bias/binwise_bias/bin_bias.py


; This module uses the Limber approximation to compute shear-shear C_ell
; given the shear kernel (which is derived from the number density and 
; from geometry)

[pk_to_cl]
file = cosmosis-standard-library/structure/projection/project_2d.py
ell_min = 100.0
ell_max = 5000.0
n_ell = 200
shear-shear = source-source
position-shear = source-source
position-position=source-source
shear-intrinsic = source-source
intrinsic-intrinsic = source-source
position-intrinsic = source-source
verbose = F


; [smail_nz]
; file = cosmosis-standard-library/number_density/smail/photometric_smail.py
; zmax = 4.0
; dz = 0.01
; nbin = 10
