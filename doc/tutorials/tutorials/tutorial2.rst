Tutorial 2: Running an MCMC sampler
-----------------------------------

In the first tutorial we generated a single likelihood.  In this tutorial we we run an MCMC analysis to explore a parameter space and put constraints on some parameters.  There are lots of different MCMC algorithms available through CosmoSIS; in this example we will use one called emcee, which is popular in astronomy.

Running an MCMC
================

Have a look at :code:`demos/demo5.ini` and its values file :code:`demos/demo5.ini`.

Let's try using `MPI parallelism <https://en.wikipedia.org/wiki/Message_Passing_Interface>`_ to speed up this analysis.  Run this command::

    mpirun -n 4 cosmosis --mpi demos/demo5.ini

If that fails straight away then you may not have MPI installed (MPI should work automatically with the bootstrap and docker installation methods - let us know if not). If it fails then you can fall back to serial mode::

    cosmosis demos/demo5.ini


Demo 5 runs a supernova likelihood, using the JLA supernova sample, which measures the redshift-distance relation. The code will take a few minutes to run, and will generate a file called :code:`demo5.txt` as output.  This file will contain a Monte Carlo Markov Chain (MCMC) which you can use as samples from the posterior probability distribution of the model given the data.


Demo 5 Parameter File
=========================


This time the parameter file contains these lines::

    [runtime]
    ; The emcee sampler, which uses the Goodman & Weare algorithm
    sampler = emcee

    [emcee]
    walkers = 64
    samples = 400
    nsteps = 100

This tells CosmoSIS to use the emcee sampler, and configures it to use 64 walkers (points exploring the parameter space).  It tells it to generate 400 samples per walker, and to save results to disc every 100 steps.


The output file
===============

The parameter file also contains these lines::

    [output]
    filename = demo5.txt
    format = text
    verbosity= debug

This tells the code to generate an output file called :code:`demo5.txt`, in text format.  You could also specify :code:`fits` to get a FITS format file.  Our first demo in tutorial 1 didn't produce an output chain, so it didn't need this section.

Whichever sampler you use, CosmoSIS output files always have the same format.  Comment lines are all preceded with a #, so that chains can be read easily with most tools.  The first line is a header which tells you what the different columns mean::

    #cosmological_parameters--omega_m   supernova_params--deltam    supernova_params--alpha supernova_params--beta  supernova_params--m post

The first entries are the varied parameters from the values file.  They are shown in the form: :code:`section_name--parameter_name`.  After this any parameters generated by the sampler are shown.  In this case that just means :code:`post` - the log-posterior of this row.  Other samplers might also generate other outputs such as weights.

The next lines are metadata and show the name of the sampler, the number of varied parameters, the pipeline that was run, papers you should cite for the given pipeline, and options passed to the sampler.  Finally, the three parameter files are all copied into the output file so you can check later exactly what you ran.

NB: The verbosity settings are a little bit confused in the code right now, so this option might not do that much.

All the samplers except the test sampler produce this chain file.  Some produce other files too.
